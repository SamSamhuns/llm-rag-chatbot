services:
  chatbot_backend:
    container_name: chatbot_backend_cont
    build:
      context: ./
      dockerfile: ./Dockerfile
    env_file: ./.env
    shm_size: 2gb
    ulimits:
      stack: 67108864
      memlock: -1
    ports:
      - ${API_SERVER_PORT}:8080
    volumes:
      - type: bind
        source: ${DOCKER_VOLUME_DIRECTORY:-.}/volumes/chatbot_backend
        target: /home/user1/chatbot_backend/volumes/chatbot_backend
    depends_on:
      - "standalone"
      - "mongod1"

  # should be replaced by an online embedding api
  hf_text_embedding_api:
    container_name: hf_text_embedding_api_cont
    build:
      context: ./app/api/docker_hf/
      dockerfile: ./Dockerfile
    shm_size: 2gb
    ulimits:
      stack: 67108864
      memlock: -1
    ports:
      - 8009:8009

  etcd:
    container_name: milvus-etcd
    image: quay.io/coreos/etcd:v3.5.0
    environment:
      - ETCD_AUTO_COMPACTION_MODE=revision
      - ETCD_AUTO_COMPACTION_RETENTION=1000
      - ETCD_QUOTA_BACKEND_BYTES=4294967296
      - ETCD_SNAPSHOT_COUNT=50000
    volumes:
      - ${DOCKER_VOLUME_DIRECTORY:-.}/volumes/etcd:/etcd
    command: etcd -advertise-client-urls=http://127.0.0.1:2379 -listen-client-urls http://0.0.0.0:2379 --data-dir /etcd

  minio:
    container_name: milvus-minio
    image: minio/minio:RELEASE.2022-03-17T06-34-49Z
    environment:
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin
    expose:
      - 9001
    volumes:
      - ${DOCKER_VOLUME_DIRECTORY:-.}/volumes/minio:/minio_data
    command: minio server /minio_data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  standalone:
    container_name: milvus-standalone
    image: milvusdb/milvus:v2.2.9
    command: ["milvus", "run", "standalone"]
    environment:
      ETCD_ENDPOINTS: etcd:2379
      MINIO_ADDRESS: minio:9000
    volumes:
      - ${DOCKER_VOLUME_DIRECTORY:-.}/volumes/milvus:/var/lib/milvus
    ports:
      - ${MILVUS_PORT}:19530
    depends_on:
      - "etcd"
      - "minio"

  # milvus vector db ui
  attu:
    container_name: milvus-attu
    image: zilliz/attu:v2.2.4
    environment:
      MILVUS_URL: standalone:${MILVUS_PORT}
    ports:
      - ${ATTU_PORT}:3000
    depends_on:
      - "standalone"

  # mongodb replicaset primary
  mongod1:
    container_name: mongod1
    image: mongo:6.0
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
    ports:
      - ${MONGO_PORT}:27017
    volumes:
      - ${DOCKER_VOLUME_DIRECTORY:-.}/volumes/mongodb/data1:/data/db
      - ${DOCKER_VOLUME_DIRECTORY:-.}/.docker/mongo/replica.key:/data/replica.key
    depends_on:
      - mongod2
      - mongod3
    restart: always
    command: "mongod --bind_ip_all --replSet rs0 --keyFile /data/replica.key"

  # mongodb replicaset secondary
  mongod2:
    container_name: mongod2
    image: mongo:6.0
    expose:
      - 27017
    volumes:
      - ${DOCKER_VOLUME_DIRECTORY:-.}/volumes/mongodb/data2:/data/db
      - ${DOCKER_VOLUME_DIRECTORY:-.}/.docker/mongo/replica.key:/data/replica.key
    restart: always
    command: "mongod --bind_ip_all --replSet rs0 --keyFile /data/replica.key"

  # mongodb replicaset arbiter
  mongod3:
    container_name: mongod3
    image: mongo:6.0
    expose:
      - 27017
    volumes:
      - ${DOCKER_VOLUME_DIRECTORY:-.}/volumes/mongodb/data3:/data/db
      - ${DOCKER_VOLUME_DIRECTORY:-.}/.docker/mongo/replica.key:/data/replica.key
    restart: always
    command: "mongod --bind_ip_all --replSet rs0 --keyFile /data/replica.key"

  # mongo partition setup
  mongo-setup:
    image: mongo:6.0
    container_name: mongo-setup
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
    depends_on:
      - mongod1
      - mongod2
      - mongod3
    volumes:
      - ${DOCKER_VOLUME_DIRECTORY:-.}/scripts/mongodb_rs_init.sh:/scripts/mongodb_rs_init.sh
    restart: on-failure
    entrypoint: ["/bin/bash", "/scripts/mongodb_rs_init.sh"]

  # mongo db express ui
  mongo-express:
    container_name: mongo-express
    image: mongo-express
    restart: always
    ports:
      - ${MONGOEXP_PORT}:8081
    environment:
      # ME_CONFIG_MONGODB_ENABLE_ADMIN: true
      # ME_CONFIG_MONGO_PORT: 27017
      # ME_CONFIG_MONGODB_SERVER: mongod1
      # ME_CONFIG_MONGODB_ADMINUSERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      # ME_CONFIG_MONGODB_ADMINPASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
      ME_CONFIG_BASICAUTH_USERNAME: ${MONGOEXP_USERNAME}
      ME_CONFIG_BASICAUTH_PASSWORD: ${MONGOEXP_PASSWORD}
      # ME_CONFIG_MONGODB_AUTH_DATABASE: admin
      # ME_CONFIG_MONGODB_URL: mongo://mongoadmin:mongoadmin@mongo:27017/
      ME_CONFIG_MONGODB_URL: "mongodb://${MONGO_INITDB_ROOT_USERNAME}:${MONGO_INITDB_ROOT_PASSWORD}@mongod1:27017/?replicaSet=rs0"
    depends_on:
      - "mongod1"

  redis-server:
    container_name: redis-server
    image: redis:7.0.8
    restart: always
    command: /bin/bash -c 'redis-server --appendonly yes'
    sysctls:
      - net.core.somaxconn=65535
    ports:
      - ${REDIS_PORT}:6379
    volumes:
      - ${DOCKER_VOLUME_DIRECTORY:-.}/volumes/redis:/data
    mem_limit: 96m


networks:
  default:
    name: chatbot_net
